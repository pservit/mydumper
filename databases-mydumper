--- mydumper.c.orig	2018-05-04 17:53:10.000000000 +0300
+++ mydumper.c	2019-01-08 21:19:46.244937000 +0200
@@ -31,6 +31,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <glib.h>
+#include <glib/gi18n.h>
 #include <stdlib.h>
 #include <stdarg.h>
 #include <errno.h>
@@ -1716,6 +1720,41 @@
 /* Heuristic chunks building - based on estimates, produces list of ranges for datadumping
    WORK IN PROGRESS
 */
+
+int check_field_type(char *field, MYSQL *conn, char *database, char *table)
+{
+	if(!field) return 0;
+
+	MYSQL_RES *val=NULL;
+
+	gchar *query = g_strdup_printf("SELECT %s %s FROM `%s`.`%s` LIMIT 1", (detected_server == SERVER_TYPE_MYSQL) ? "/*!40001 SQL_NO_CACHE */" : "", field, database, table);
+	mysql_query(conn, query);
+	g_free(query);
+	val=mysql_store_result(conn);
+
+	if (!val) return 0;
+
+	// MYSQL_ROW row = mysql_fetch_row(val);
+	MYSQL_FIELD * fields=mysql_fetch_fields(val);
+
+	int type = fields[0].type;
+	mysql_free_result(val);
+	
+	if( type == MYSQL_TYPE_LONG || type == MYSQL_TYPE_LONGLONG || type == MYSQL_TYPE_INT24) return 1;
+
+	return 0;
+}
+
+guint64 pow10( int exp )
+{
+	guint64 result = 1;
+	
+	for( int i = 1; i <= exp; ++i ) result *= 10;
+	
+	return result;
+}
+
+
 GList * get_chunks_for_table(MYSQL *conn, char *database, char *table, struct configuration *conf) {
 
 	GList *chunks = NULL;
@@ -1737,6 +1776,7 @@
 			break;
 		}
 	}
+	if(!check_field_type(field, conn, database, table)) field = NULL;
 
 	/* If no PK found, try using first UNIQUE index */
 	if (!field) {
@@ -1744,8 +1784,10 @@
 		while ((row=mysql_fetch_row(indexes))) {
 			if(!strcmp(row[1],"0") && (!strcmp(row[3],"1"))) {
 				/* Again, first column of any unique index */
-				field=row[4];
-				break;
+				if(check_field_type(row[4], conn, database, table)) {
+					field=row[4];
+					break;
+				}
 			}
 		}
 	}
@@ -1760,7 +1802,8 @@
 			if(!strcmp(row[3],"1")) {
 				if (row[6])
 					cardinality = strtoll(row[6],NULL,10);
-				if (cardinality>max_cardinality) {
+
+				if (cardinality>max_cardinality && check_field_type(row[4], conn, database, table)) {
 					field=row[4];
 					max_cardinality=cardinality;
 				}
@@ -1787,14 +1830,17 @@
 
 	char *min=row[0];
 	char *max=row[1];
-
+	
+	if (!min || !max)
+		goto cleanup;
+	
 	/* Got total number of rows, skip chunk logic if estimates are low */
 	guint64 rows = estimate_count(conn, database, table, field, NULL, NULL);
 	if (rows <= rows_per_file)
 		goto cleanup;
 
 	/* This is estimate, not to use as guarantee! Every chunk would have eventual adjustments */
-	guint64 estimated_chunks = rows / rows_per_file;
+	// guint64 estimated_chunks = rows / rows_per_file;
 	guint64 estimated_step, nmin, nmax, cutoff;
 
 	/* Support just bigger INTs for now, very dumb, no verify approach */
@@ -1805,8 +1851,24 @@
 			/* static stepping */
 			nmin = strtoll(min,NULL,10);
 			nmax = strtoll(max,NULL,10);
-			estimated_step = (nmax-nmin)/estimated_chunks+1;
-			cutoff = nmin;
+			
+			const int MAX_FILES = 100;
+			
+			cutoff         = 0;
+			estimated_step = nmax / MAX_FILES;
+			
+			if(estimated_step > 50000) {
+				estimated_step = 100000;
+			} else {
+				estimated_step = 10000;
+			}
+			
+			if( nmax / estimated_step > 5000 ) {
+				estimated_step = pow10( (int)floor(log10(nmax)) - 3 );
+			}
+
+			g_message("Table %s.%s: rows=%llu, nmin=%llu, nmax=%llu, cutoff=%llu, step=%llu", database, table, (unsigned long long)rows, (unsigned long long)nmin, (unsigned long long)nmax, (unsigned long long)cutoff, (unsigned long long)estimated_step);
+
 			while(cutoff<=nmax) {
 				chunks=g_list_append(chunks,g_strdup_printf("%s%s%s%s(`%s` >= %llu AND `%s` < %llu)",
 						!showed_nulls?"`":"",




--- CMakeLists.txt.bak	2018-05-04 17:53:10.000000000 +0300
+++ CMakeLists.txt	2020-06-22 14:56:42.363073000 +0300
@@ -19,7 +19,8 @@
 option(WITH_BINLOG "Build binlog dump options" OFF)
 option(WITH_SSL "Build SSL support" ON)
 
-set(CMAKE_C_FLAGS "-Wall -Wno-deprecated-declarations -Wunused -Wwrite-strings -Wno-strict-aliasing -Wextra -Wshadow -Werror -O3 -g ${MYSQL_CFLAGS}")
+set(CMAKE_EXE_LINKER_FLAGS "-L/usr/local/lib")
+set(CMAKE_C_FLAGS "-Wall -Wno-deprecated-declarations -Wunused -Wwrite-strings -Wno-strict-aliasing -Wextra -Wshadow  -O3 -g ${MYSQL_CFLAGS}")
 
 include_directories(${MYDUMPER_SOURCE_DIR} ${MYSQL_INCLUDE_DIR} ${GLIB2_INCLUDE_DIR} ${PCRE_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS})
 
@@ -37,7 +38,7 @@
 else (WITH_BINLOG)
   add_executable(mydumper mydumper.c server_detect.c g_unix_signal.c connection.c getPassword.c)
 endif (WITH_BINLOG)
-target_link_libraries(mydumper ${MYSQL_LIBRARIES} ${GLIB2_LIBRARIES} ${GTHREAD2_LIBRARIES} ${PCRE_PCRE_LIBRARY} ${ZLIB_LIBRARIES} stdc++)
+target_link_libraries(mydumper ${MYSQL_LIBRARIES} ${GLIB2_LIBRARIES} ${GTHREAD2_LIBRARIES} ${PCRE_PCRE_LIBRARY} ${ZLIB_LIBRARIES} stdc++ -lm)
 
 
 add_executable(myloader myloader.c connection.c getPassword.c)
